{"ast":null,"code":"var _jsxFileName = \"/home/iorgen/Public/www/step-form-formik/src/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { Button, Card, CardContent } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport { mixed, number, object } from 'yup';\nexport default function Home() {\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    validationSchema: object({\n      money: mixed().when('millionaire', {\n        is: true,\n        then: number().required().min(1000000, 'Because you said you are a millionaire you need have 1 million'),\n        otherwise: number().required()\n      })\n    }),\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      millionaire: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, __jsx(Field, {\n    name: \"firstName\",\n    component: TextField,\n    label: \"First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), __jsx(Field, {\n    name: \"lastName\",\n    component: TextField,\n    label: \"Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), __jsx(Field, {\n    name: \"millionaire\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'I am a millionaire'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, __jsx(Field, {\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(Field, {\n    name: \"description\",\n    type: \"number\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })))));\n}\nexport function FormikStepper(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const childrenArray = React.Children.toArray(children);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const currentChild = childrenArray[step];\n  return __jsx(Formik, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), __jsx(Form, {\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, currentChild, step > 0 ? __jsx(Button, {\n    onClick: () => setStep(s => s - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"Back\") : null));\n}","map":{"version":3,"sources":["/home/iorgen/Public/www/step-form-formik/src/pages/index.tsx"],"names":["React","useState","Button","Card","CardContent","Field","Form","Formik","CheckboxWithLabel","TextField","mixed","number","object","Home","money","when","is","then","required","min","otherwise","firstName","lastName","millionaire","description","label","FormikStepper","children","props","childrenArray","Children","toArray","step","setStep","currentChild","s"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Card, CardContent } from '@material-ui/core';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport { mixed, number, object } from 'yup';\n\nexport default function Home() {\n  return (\n    <Card>\n      <CardContent>\n        <FormikStepper\n          validationSchema={\n            object({\n              money: mixed().when('millionaire', {\n                is: true,\n                then: number().required().min(1_000_000, 'Because you said you are a millionaire you need have 1 million'),\n                otherwise: number().required()\n              })\n            })\n          }\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            millionaire: false,\n            money: 0,\n            description: '',\n          }} onSubmit={() => { }}>\n          <div>\n            <Field name=\"firstName\" component={TextField} label=\"First Name\" />\n            <Field name=\"lastName\" component={TextField} label=\"Last Name\" />\n            <Field name=\"millionaire\" type=\"checkbox\" component={CheckboxWithLabel} Label={{ label: 'I am a millionaire' }} />\n          </div>\n\n          <div>\n            <Field name=\"money\" type=\"number\" component={TextField} label=\"All the money I have\" />\n          </div>\n\n          <div>\n            <Field name=\"description\" type=\"number\" component={TextField} label=\"Description\" />\n          </div>\n        </FormikStepper>\n      </CardContent>\n    </Card >\n  );\n}\n\n\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\n  const childrenArray = React.Children.toArray(children);\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n\n\n  return (\n    <Formik {...props}>\n      <Form autoComplete=\"off\">\n        {currentChild}\n        {step > 0 ? <Button onClick={() => setStep(s => s - 1)}>Back</Button> : null}\n      </Form>\n    </Formik>\n  )\n}"]},"metadata":{},"sourceType":"module"}